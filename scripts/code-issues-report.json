{
  "src\\App.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ai\\ChatBotWidget.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 28,
        "column": 33,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"materials\")\n          .select(\"id, quantity\", { count: \"exact\" })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 174,
        "column": 23,
        "match": "await getAIResponse(userMessage)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\budget\\BudgetForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 93,
        "column": 33,
        "match": "await supabase\n          .from(\"projects\")\n          .select(\"*\")\n          .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 146,
        "column": 27,
        "match": "await supabase\n          .from(\"budgets\")\n          .update({\n            name: values.name,\n            description: values.description,\n            project_id: values.project_id,\n            total_amount: values.total_amount,\n            start_date: values.start_date || null,\n            end_date: values.end_date || null,\n            status: values.status,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", budget.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 169,
        "column": 27,
        "match": "await supabase.from(\"budgets\").insert({\n        } catch (error) {\n          // Handle error appropriately\n        }\n          name: values.name,\n          description: values.description,\n          project_id: values.project_id,\n          total_amount: values.total_amount,\n          start_date: values.start_date || null,\n          end_date: values.end_date || null,\n          status: values.status,\n          created_by: user.id,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\budget\\BudgetList.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\budget\\ExpensesList.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 89,
        "column": 31,
        "match": "await supabase\n        .from(\"expenses\")\n        .select(\"*\")\n        .eq(\"budget_id\", budget.id)\n        .order(\"date\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 121,
        "column": 31,
        "match": "await supabase\n        .from(\"budget_categories\")\n        .select(\"*\")\n        .eq(\"budget_id\", budget.id)\n        .order(\"name\")"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\common\\EmptyState.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\common\\ErrorMessage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\common\\LoadingSpinner.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\common\\PageHeader.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\common\\UserRoleInfo.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\common\\WelcomeMessage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\CalendarWidget.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\DashboardOverview.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\EmailWidget.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\FileUploadSection.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 41,
        "column": 9,
        "match": "await onFileUpload(file)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 54,
        "column": 27,
        "match": "await import(\"exceljs\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 63,
        "column": 15,
        "match": "await workbook.xlsx.load(buffer)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 93,
        "column": 11,
        "match": "await new Promise((resolve) => setTimeout(resolve, 1500))"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\dashboard\\Header.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\InventoryPreview.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\NotificationsPanel.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\ProjectsOverview.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\QuickActions.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\RecentActivity.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\dashboard\\WelcomeCard.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\debug\\DatabaseChecker.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 33,
        "column": 60,
        "match": "await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 44,
        "column": 60,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"projects\")\n        .select(\"*\")\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 58,
        "column": 62,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"materials\")\n        .select(\"*\")\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 92,
        "column": 48,
        "match": "await supabase.rpc(\n          \"create_projects_table\"\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 49,
        "match": "await supabase.rpc(\n        } catch (error) {\n          // Handle error appropriately\n        }\n          \"create_materials_table\"\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 114,
        "column": 7,
        "match": "await checkDatabase()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\debug\\DatabaseManager.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 29,
        "column": 60,
        "match": "await supabase\n        .from('profiles')\n        .select('*')\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 40,
        "column": 60,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('projects')\n        .select('*')\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 54,
        "column": 62,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .select('*')\n        .limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 92,
        "column": 25,
        "match": "await supabase.rpc('reset_database')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 105,
        "column": 7,
        "match": "await checkDatabase()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 126,
        "column": 25,
        "match": "await supabase.rpc('seed_database')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 139,
        "column": 7,
        "match": "await checkDatabase()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 164,
        "column": 37,
        "match": "await supabase.rpc('reset_database')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 172,
        "column": 36,
        "match": "await supabase.rpc('seed_database')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 188,
        "column": 7,
        "match": "await checkDatabase()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\desktop\\DesktopInfo.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 38,
        "column": 20,
        "match": "await openFileDialog({\n        filters: [\n          { name: \"Text\", extensions: [\"txt\", \"md\"] },\n          { name: \"Images\", extensions: [\"png\", \"jpg\", \"jpeg\"] },\n          { name: \"All Files\", extensions: [\"*\"] },\n        ],\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 56,
        "column": 25,
        "match": "await openDirectory()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\documents\\DocumentCollaboration.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ErrorBoundary.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\home\\CallToAction.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\home\\FeatureGrid.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\home\\HeroSection.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\home.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\AutomatedOrderingSystem.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 88,
        "column": 31,
        "match": "await supabase\r\n        .from(\"project_order_settings\")\r\n        .select(\"*\")\r\n        .eq(\"project_id\", projectId)\r\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 118,
        "column": 31,
        "match": "await supabase\r\n        .from(\"suppliers\")\r\n        .select(\"id, name\")\r\n        .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 141,
        "column": 31,
        "match": "await supabase\r\n        .from(\"project_order_settings\")\r\n        .upsert({\r\n          project_id: projectId,\r\n          enabled: settings.enabled,\r\n          threshold_percentage: settings.threshold_percentage,\r\n          auto_approve_below_amount: settings.auto_approve_below_amount,\r\n          preferred_supplier_id: settings.preferred_supplier_id,\r\n          notification_email: settings.notification_email,\r\n          order_frequency: settings.order_frequency,\r\n        })\r\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 188,
        "column": 31,
        "match": "await supabase\r\n        .from(\"materials\")\r\n        .select(\r\n          \"id, name, quantity, min_stock_level, max_stock_level, unit, cost_per_unit\",\r\n        )\r\n        .eq(\"project_id\", projectId)\r\n        .not(\"min_stock_level\", \"is\", null)\r\n        .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 230,
        "column": 31,
        "match": "await supabase\r\n        .from(\"material_orders\")\r\n        .select(\"*, materials(name, unit)\")\r\n        .eq(\"project_id\", projectId)\r\n        .eq(\"status\", \"pending\")\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 270,
        "column": 31,
        "match": "await supabase\r\n        .from(\"material_orders\")\r\n        .insert({\r\n          project_id: projectId,\r\n          material_id: item.id,\r\n          quantity: quantity,\r\n          status:\r\n            estimatedCost && estimatedCost <= settings.auto_approve_below_amount\r\n              ? \"approved\"\r\n              : \"pending\",\r\n          supplier_id: settings.preferred_supplier_id,\r\n          estimated_cost: estimatedCost,\r\n          created_by: \"system\",\r\n          notes: \"Automatically generated order due to low stock level\",\r\n        })\r\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 322,
        "column": 25,
        "match": "await supabase\r\n        .from(\"material_orders\")\r\n        .update({ status: \"approved\", approved_at: new Date().toISOString() })\r\n        .eq(\"id\", orderId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 359,
        "column": 25,
        "match": "await supabase\r\n        .from(\"material_orders\")\r\n        .update({ status: \"rejected\", rejected_at: new Date().toISOString() })\r\n        .eq(\"id\", orderId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 402,
        "column": 11,
        "match": "await createOrder(item, item.order_quantity)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\columns.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\data-table.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\DeleteConfirmationDialog.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 39,
        "column": 22,
        "match": "await onConfirm(material.id)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\EnhancedVirtualizedMaterialsTable.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\ImportDialog.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 85,
        "column": 24,
        "match": "await inventoryService.previewImport(formData)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 124,
        "column": 24,
        "match": "await inventoryService.importInventory(formData)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\InventoryActions.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\InventoryAssistant.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 34,
        "column": 3,
        "match": "await new Promise(resolve => setTimeout(resolve, 1000))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 165,
        "column": 24,
        "match": "await onGenerateReorderList()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 198,
        "column": 28,
        "match": "await simulateAIResponse(input, materials, t)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\InventoryFilters.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\InventoryStats.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\LowStockCard.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\ManagerFields.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\MaterialCard.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\MaterialDialog.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 33,
        "column": 20,
        "match": "await onSubmit(data)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\MaterialForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 75,
        "column": 36,
        "match": "await enhancedSupabaseService.custom<{ category: string }[]>(\n          'SELECT DISTINCT category FROM materials WHERE category IS NOT NULL ORDER BY category'\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 85,
        "column": 35,
        "match": "await enhancedSupabaseService.select(\n        } catch (error) {\n          // Handle error appropriately\n        }\n          'suppliers',\n          'id, name',\n          { order: { column: 'name', ascending: true } }\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 100,
        "column": 34,
        "match": "await enhancedSupabaseService.select(\n        } catch (error) {\n          // Handle error appropriately\n        }\n          'projects',\n          'id, name',\n          { \n            filters: { status: 'active' },\n            order: { column: 'name', ascending: true } \n          }\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 118,
        "column": 35,
        "match": "await enhancedSupabaseService.custom<{ location: string }[]>(\n        } catch (error) {\n          // Handle error appropriately\n        }\n          'SELECT DISTINCT location FROM materials WHERE location IS NOT NULL ORDER BY location'\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 146,
        "column": 22,
        "match": "await onSubmit(data)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\MaterialsTable.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\MaterialsTable.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\optimized-data-table.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\ProjectSelector.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 40,
        "column": 35,
        "match": "await supabase\n            .from(\"projects\")\n            .select(\"id, name, status\")\n            .eq(\"manager_id\", user.id)\n            .order(\"name\", { ascending: true })"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\RecentActivityCard.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\inventory\\ReorderList.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 48,
        "column": 22,
        "match": "await onGenerateList()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 65,
        "column": 7,
        "match": "await onExport(format)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\SupplierAnnouncementList.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 93,
        "column": 9,
        "match": "await supabase\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"supplier_announcements\")\r\n          .select(\"*\")\r\n          .eq(\"project_id\", projectId)\r\n          .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 107,
        "column": 40,
        "match": "await Promise.all(\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          announcementsData.map(async (announcement) => {\r\n            try {\n            const { data: filesData, error: filesError } = await supabase\r\n            } catch (error) {\n              // Handle error appropriately\n            }\n              .from(\"supplier_announcement_files\")\r\n              .select(\"*\")\r\n              .eq(\"announcement_id\", announcement.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 157,
        "column": 25,
        "match": "await supabase\r\n        .from(\"supplier_announcements\")\r\n        .update({ status: newStatus })\r\n        .eq(\"id\", announcementId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 254,
        "column": 31,
        "match": "await supabase.storage\r\n        .from(\"supplier-files\")\r\n        .download(file.file_path)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 283,
        "column": 33,
        "match": "await supabase.storage\r\n          .from(\"supplier-files\")\r\n          .createSignedUrl(file.file_path, 60)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\SupplierAnnouncementUpload.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 137,
        "column": 64,
        "match": "await supabase\r\n        .from(\"supplier_announcements\")\r\n        .insert([\r\n          {\r\n            project_id: projectId,\r\n            supplier_name: supplierName,\r\n            notes: supplierNote,\r\n            status: \"pending\",\r\n          },\r\n        ])\r\n        .select()\r\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 163,
        "column": 42,
        "match": "await supabase.storage\r\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"supplier-files\")\r\n            .upload(filePath, file.file)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 174,
        "column": 46,
        "match": "await supabase\r\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"supplier_announcement_files\")\r\n            .insert([\r\n              {\r\n                announcement_id: announcement.id,\r\n                file_path: filePath,\r\n                file_name: file.name,\r\n                file_type: file.type,\r\n                file_size: file.file.size,\r\n              },\r\n            ])"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\inventory\\VirtualizedMaterialsTable.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\layout\\AppLayout.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\layout\\Footer.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\layout\\LanguageSwitcher.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\layout\\ModernNavbar.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 176,
        "column": 5,
        "match": "await signOut()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\layout\\Navbar.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 113,
        "column": 5,
        "match": "await logout()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\layout\\SettingsModal.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\layout\\Sidebar.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 202,
        "column": 5,
        "match": "await signOut()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\layout\\__tests__\\AppLayout.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\loading\\index.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\projects\\ProjectDetails.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\projects\\ProjectForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 289,
        "column": 18,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"projects\")\n          .update(projectData)\n          .eq(\"id\", project.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 309,
        "column": 18,
        "match": "await supabase.from(\"projects\").insert([projectData]).select()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\projects\\ProjectsList.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\reports\\ReportForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 62,
        "match": "await supabase\n          .from(\"projects\")\n          .select(\"*\")\n          .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 107,
        "column": 64,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"report_templates\")\n          .select(\"*\")\n          .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 174,
        "column": 29,
        "match": "await supabase\n            .rpc('generate_project_report', {\n              project_id_param: values.project_id\n            })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 203,
        "column": 27,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"reports\")\n          .update({\n            name: values.name,\n            description: values.description,\n            project_id: values.project_id || null,\n            type: values.type,\n            status: values.status,\n            data: templateData || report.data,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", report.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 228,
        "column": 27,
        "match": "await supabase.from(\"reports\").insert({\n        } catch (error) {\n          // Handle error appropriately\n        }\n          name: values.name,\n          description: values.description,\n          project_id: values.project_id || null,\n          type: values.type,\n          status: values.status,\n          data: templateData || {},\n          created_by: user.id,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\reports\\ReportsList.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\reports\\ReportViewer.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 58,
        "column": 33,
        "match": "await supabase\n          .from(\"projects\")\n          .select(\"*\")\n          .eq(\"id\", report.project_id)\n          .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 81,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, 1500))"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\resources\\ResourceAllocations.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 88,
        "column": 31,
        "match": "await supabase\n        .from(\"resource_allocations\")\n        .select(\"*\")\n        .eq(\"resource_id\", resource.id)\n        .order(\"start_date\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 113,
        "column": 31,
        "match": "await supabase\n        .from(\"projects\")\n        .select(\"id, name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 140,
        "column": 25,
        "match": "await supabase\n        .from(\"resource_allocations\")\n        .delete()\n        .eq(\"id\", allocationId)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\resources\\ResourceForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 89,
        "column": 33,
        "match": "await supabase\n          .from(\"resource_categories\")\n          .select(\"*\")\n          .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 124,
        "column": 35,
        "match": "await supabase\n            .from(\"resource_category_mappings\")\n            .select(\"category_id\")\n            .eq(\"resource_id\", resource.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 159,
        "column": 27,
        "match": "await supabase\n          .from(\"resources\")\n          .update({\n            name: values.name,\n            description: values.description,\n            type: values.type,\n            status: values.status,\n            cost_per_day: values.cost_per_day || null,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", resource.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 177,
        "column": 42,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"resource_category_mappings\")\n            .delete()\n            .eq(\"resource_id\", resource.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 194,
        "column": 42,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"resource_category_mappings\")\n            .insert(mappings)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 211,
        "column": 33,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"resources\")\n          .insert({\n            name: values.name,\n            description: values.description,\n            type: values.type,\n            status: values.status,\n            cost_per_day: values.cost_per_day || null,\n            created_by: user.id,\n          })\n          .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 237,
        "column": 43,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"resource_category_mappings\")\n            .insert(mappings)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\resources\\ResourcesList.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tasks\\TaskFilters.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tasks\\TaskForm.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tasks\\TaskItem.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tasks\\TaskList.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tasks\\TaskManagement.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 91,
        "column": 21,
        "match": "await createTask(newTask)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 115,
        "column": 21,
        "match": "await updateTask(taskToEdit)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\tasks\\__tests__\\TaskManagement.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 137,
        "column": 24,
        "match": "await screen.findByText('Edit')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 172,
        "column": 26,
        "match": "await screen.findByText('Delete')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 197,
        "column": 5,
        "match": "await waitFor(() => {\n    } catch (error) {\n      // Handle error appropriately\n    }\n      expect(mockUseTasks.createTask).toHaveBeenCalled()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 214,
        "column": 24,
        "match": "await screen.findByText('Edit')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 228,
        "column": 5,
        "match": "await waitFor(() => {\n    } catch (error) {\n      // Handle error appropriately\n    }\n      expect(mockUseTasks.updateTask).toHaveBeenCalled()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\teams\\TeamForm.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 91,
        "column": 27,
        "match": "await supabase\n          .from(\"teams\")\n          .update({\n            name: values.name,\n            description: values.description,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", team.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 109,
        "column": 27,
        "match": "await supabase.from(\"teams\").insert({\n        } catch (error) {\n          // Handle error appropriately\n        }\n          name: values.name,\n          description: values.description,\n          created_by: user.id,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\teams\\TeamMembers.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 107,
        "column": 31,
        "match": "await supabase\n        .from(\"team_members\")\n        .select(\"*\")\n        .eq(\"team_id\", team.id)\n        .order(\"name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 132,
        "column": 25,
        "match": "await supabase\n        .from(\"team_members\")\n        .delete()\n        .eq(\"id\", memberId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 417,
        "column": 27,
        "match": "await supabase\n          .from(\"team_members\")\n          .update({\n            name: values.name,\n            email: values.email,\n            role: values.role,\n            phone: values.phone,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", member.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 437,
        "column": 27,
        "match": "await supabase.from(\"team_members\").insert({\n        } catch (error) {\n          // Handle error appropriately\n        }\n          team_id: teamId,\n          name: values.name,\n          email: values.email,\n          role: values.role,\n          phone: values.phone,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\teams\\TeamsList.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 74,
        "column": 31,
        "match": "await supabase\n        .from(\"teams\")\n        .select(\"*\")\n        .order(sortField, { ascending: sortDirection === \"asc\" })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 98,
        "column": 25,
        "match": "await supabase\n        .from(\"teams\")\n        .delete()\n        .eq(\"id\", teamId)"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\tutorial\\TutorialOverlay.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\tutorial\\useTutorial.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\accordion.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\alert-dialog.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\alert.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\aspect-ratio.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\avatar.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\badge.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\button.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\calendar.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\card.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\carousel.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\checkbox.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\collapsible.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\command.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\connection-status.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 29,
        "column": 40,
        "match": "await connectionService.checkConnections()"
      }
    ],
    "hasIssues": true
  },
  "src\\components\\ui\\context-menu.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\date-picker-with-range.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\dialog.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\drawer.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\dropdown-menu.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\enhanced-notification.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\form.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\global-search.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\hover-card.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\input.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\label.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\lazy-load.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\menubar.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\navigation-menu.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\notification-center.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\notification.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\offline-indicator.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\optimized-image.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\pagination.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\popover.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\progress.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\radio-group.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\resizable.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\scroll-area.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\select.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\separator.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\sheet.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\skeleton.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\slider.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\spotlight.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\switch.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\table.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\tabs.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\textarea.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\theme-toggle.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\toast.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\toaster.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\toggle.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\tooltip.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\use-toast.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\virtual-list.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\virtual-table.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\__tests__\\button.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\__tests__\\card.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\ui\\__tests__\\input.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\welcome\\WelcomeOverlay.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\components\\welcome\\__tests__\\WelcomeOverlay.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\config\\app-config.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\config\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\config\\routes-config.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\contexts\\AdvancedRoleContext.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 565,
        "column": 31,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"user_roles\")\n        .select(\"role\")\n        .eq(\"user_id\", user.id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 584,
        "column": 11,
        "match": "await supabase\n            .from(\"user_roles\")\n            .insert([{ user_id: user.id, role: \"utilizator\" }])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 615,
        "column": 11,
        "match": "await supabase\n            .from(\"user_roles\")\n            .insert([{ user_id: user.id, role: \"utilizator\" }])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 647,
        "column": 5,
        "match": "await fetchUserRole()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 661,
        "column": 17,
        "match": "await fetchUserRole()"
      }
    ],
    "hasIssues": true
  },
  "src\\contexts\\AuthContext.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 71,
        "column": 31,
        "match": "await roleService.getUserProfile(user)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 164,
        "column": 13,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 182,
        "column": 13,
        "match": "await fetchUserProfile(session.user)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 202,
        "column": 13,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 220,
        "column": 13,
        "match": "await fetchUserProfile(session.user)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 256,
        "column": 9,
        "match": "await fetchUserProfile(session.user)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 280,
        "column": 24,
        "match": "await authService.signIn(email, password)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 298,
        "column": 24,
        "match": "await authService.signUp(email, password, displayName)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 311,
        "column": 5,
        "match": "await authService.signOut()"
      }
    ],
    "hasIssues": true
  },
  "src\\contexts\\EnhancedThemeContext.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\contexts\\OfflineContext.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 163,
        "column": 22,
        "match": "await offlineService.syncOfflineOperations()"
      }
    ],
    "hasIssues": true
  },
  "src\\contexts\\RoleContext.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 31,
        "match": "await supabase\r\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"user_roles\")\r\n        .select(\"role\")\r\n        .eq(\"user_id\", user.id)\r\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 118,
        "column": 11,
        "match": "await supabase\r\n            .from(\"user_roles\")\r\n            .insert([{ user_id: user.id, role: \"user\" }])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 131,
        "column": 11,
        "match": "await supabase\r\n            .from(\"user_roles\")\r\n            .insert([{ user_id: user.id, role: \"user\" }])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 151,
        "column": 5,
        "match": "await fetchUserRole()"
      }
    ],
    "hasIssues": true
  },
  "src\\contexts\\ThemeContext.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\contexts\\__tests__\\AuthContext.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 122,
        "column": 5,
        "match": "await waitFor(() => {\n    } catch (error) {\n      // Handle error appropriately\n    }\n      expect(screen.getByText('Logged in as: test@example.com')).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 157,
        "column": 5,
        "match": "await waitFor(() => {\n    } catch (error) {\n      // Handle error appropriately\n    }\n      expect(screen.getByText('Not logged in')).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 202,
        "column": 5,
        "match": "await waitFor(() => {\n    } catch (error) {\n      // Handle error appropriately\n    }\n      expect(screen.getByText('Logged in as: test@example.com')).toBeInTheDocument()"
      }
    ],
    "hasIssues": true
  },
  "src\\design-system\\components\\Button.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\design-system\\components\\Card.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\design-system\\components\\Input.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\design-system\\tokens\\colors.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\design-system\\tokens\\spacing.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\design-system\\tokens\\typography.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\use-materials.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 63,
        "column": 7,
        "match": "await fetchMaterialsFromStore()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 7,
        "match": "await fetchMaterialFromStore(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 22,
        "match": "await createMaterialInStore(material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 110,
        "column": 9,
        "match": "await fetchMaterials()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 149,
        "column": 22,
        "match": "await updateMaterialInStore(id, material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 162,
        "column": 9,
        "match": "await fetchMaterials()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 200,
        "column": 22,
        "match": "await deleteMaterialInStore(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 213,
        "column": 9,
        "match": "await fetchMaterials()"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\use-projects.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 63,
        "column": 7,
        "match": "await fetchProjectsFromStore()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 7,
        "match": "await fetchProjectFromStore(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 22,
        "match": "await createProjectInStore(project)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 110,
        "column": 9,
        "match": "await fetchProjects()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 149,
        "column": 22,
        "match": "await updateProjectInStore(id, project)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 162,
        "column": 9,
        "match": "await fetchProjects()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 200,
        "column": 22,
        "match": "await deleteProjectInStore(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 213,
        "column": 9,
        "match": "await fetchProjects()"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useAsync.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 22,
        "match": "await asyncFunction(...args)"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useDataLoader.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 36,
        "column": 22,
        "match": "await dataLoader.loadData<T>(table, columns, options, key, expireIn)"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useDebounce.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useInventory.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 238,
        "column": 24,
        "match": "await inventoryService.getItems({ \n        projectId: projectId || state.filters.projectId,\n        orderBy: { \n          column: state.sort.field, \n          ascending: state.sort.direction === 'asc' \n        }\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 274,
        "column": 24,
        "match": "await inventoryService.createItem(material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 328,
        "column": 24,
        "match": "await inventoryService.updateItem(id, material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 367,
        "column": 24,
        "match": "await inventoryService.deleteItem(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 399,
        "column": 24,
        "match": "await inventoryService.updateSuplimentar(id, quantity)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 435,
        "column": 24,
        "match": "await inventoryService.confirmSuplimentar(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 471,
        "column": 24,
        "match": "await inventoryService.generateReorderList()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 495,
        "column": 24,
        "match": "await inventoryService.exportInventory(format, {\n        projectId: projectId || state.filters.projectId,\n        category: state.filters.category\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useLocalStorage.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useMediaQuery.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useNotifications.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 26,
        "column": 21,
        "match": "await notificationService.requestPermission()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 41,
        "column": 25,
        "match": "await requestPermission()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 63,
        "column": 25,
        "match": "await requestPermission()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 81,
        "column": 25,
        "match": "await requestPermission()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 99,
        "column": 25,
        "match": "await requestPermission()"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useOnClickOutside.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useOptimizedImage.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\usePageTransition.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useSessionStorage.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\hooks\\useTasks.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 38,
        "column": 31,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 67,
        "column": 31,
        "match": "await supabase\n        .from(\"profiles\")\n        .select(\"id, email, full_name\")\n        .order(\"full_name\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 131,
        "column": 31,
        "match": "await supabase\n        .from(\"tasks\")\n        .insert([{\n          ...newTask,\n          project_id: projectId,\n          created_by: user?.id\n        }])\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 172,
        "column": 31,
        "match": "await supabase\n        .from(\"tasks\")\n        .update({\n          title: taskToEdit.title,\n          description: taskToEdit.description,\n          status: taskToEdit.status,\n          priority: taskToEdit.priority,\n          due_date: taskToEdit.due_date,\n          assigned_to: taskToEdit.assigned_to,\n          tags: taskToEdit.tags,\n        })\n        .eq(\"id\", taskToEdit.id)\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 209,
        "column": 25,
        "match": "await supabase\n        .from(\"tasks\")\n        .delete()\n        .eq(\"id\", taskId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 237,
        "column": 25,
        "match": "await supabase\n        .from(\"tasks\")\n        .update({ status: newStatus })\n        .eq(\"id\", taskId)"
      }
    ],
    "hasIssues": true
  },
  "src\\hooks\\useTauri.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 24,
        "column": 24,
        "match": "await tauriClient.getSystemInfo()"
      }
    ],
    "hasIssues": true
  },
  "src\\i18n.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\animation-variants.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\animations\\animation-variants.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\animations\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\animations\\use-animation-controls.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\api\\api-client.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 120,
        "column": 33,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 134,
        "column": 22,
        "match": "await fetch(urlWithParams.toString(), {\n      ...fetchOptions,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      signal: combinedSignal,\n    })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 161,
        "column": 18,
        "match": "await response.json()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 164,
        "column": 18,
        "match": "await response.text() as unknown as T"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 188,
        "column": 27,
        "match": "await response.json()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 212,
        "column": 9,
        "match": "await new Promise((resolve) => setTimeout(resolve, retryDelay))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 268,
        "column": 7,
        "match": "await new Promise((resolve) => setTimeout(resolve, retryDelay))"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\api\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\auth-error-handler.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 315,
        "column": 24,
        "match": "await originalFetch(input, init)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 322,
        "column": 24,
        "match": "await clonedResponse.json()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\cache-manager.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 254,
        "column": 25,
        "match": "await generator()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\cache-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 130,
        "column": 18,
        "match": "await loader()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\connection-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 106,
        "column": 22,
        "match": "await Promise.race([connectionPromise, timeoutPromise])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 220,
        "column": 30,
        "match": "await fetch(service, {\r\n              method: \"HEAD\",\r\n              mode: \"no-cors\",\r\n              cache: \"no-cache\",\r\n              signal: controller.signal,\r\n            })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 261,
        "column": 22,
        "match": "await Promise.race([anyConnectionPromise, timeoutPromise])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 336,
        "column": 25,
        "match": "await this.checkInternetConnection()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 351,
        "column": 35,
        "match": "await this.checkConnection()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\constants.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\data-loader.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 67,
        "column": 37,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 38,
        "match": "await fetch(\n              } catch (error) {\n                // Handle error appropriately\n              }\n                `${supabaseUrl}/rest/v1/${table}?select=${encodeURIComponent(\n                  columns\n                )}`,\n                {\n                  method: \"GET\",\n                  headers: customHeaders,\n                }\n              )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 110,
        "column": 30,
        "match": "await directResponse.json()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 135,
        "column": 22,
        "match": "await supabaseService.select(table, columns, options)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 152,
        "column": 41,
        "match": "await supabase.auth.refreshSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 158,
        "column": 35,
        "match": "await supabaseService.select(\n            } catch (error) {\n              // Handle error appropriately\n            }\n              table,\n              columns,\n              options\n            )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 265,
        "column": 5,
        "match": "await loadData<T>(table, columns, options, key, expireIn)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\date-utils\\date-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\date-utils\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\edge-functions.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 43,
        "column": 12,
        "match": "await Promise.race([requestPromise, timeoutPromise])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 60,
        "column": 20,
        "match": "await callEdgeFunction('request-suplimentar', { materialId, quantity })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 67,
        "column": 31,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .update({ suplimentar: quantity })\n        .eq('id', materialId)\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 20,
        "match": "await callEdgeFunction('confirm-suplimentar', { materialId })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 103,
        "column": 53,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .select('suplimentar, quantity')\n        .eq('id', materialId)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 118,
        "column": 31,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .update({\n          quantity: (material.quantity || 0) + (material.suplimentar || 0),\n          suplimentar: 0\n        })\n        .eq('id', materialId)\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 149,
        "column": 20,
        "match": "await callEdgeFunction('adjust-suplimentar', { materialId, adjustment })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 158,
        "column": 53,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .select('suplimentar')\n        .eq('id', materialId)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 176,
        "column": 31,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .update({ suplimentar: newValue })\n        .eq('id', materialId)\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 204,
        "column": 20,
        "match": "await callEdgeFunction('delete-material', { materialId })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 211,
        "column": 31,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from('materials')\n        .delete()\n        .eq('id', materialId)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\enhanced-supabase-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 68,
        "column": 29,
        "match": "await promise"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 117,
        "column": 22,
        "match": "await handlePromise<T>(\n      } catch (error) {\n        // Handle error appropriately\n      }\n        (supabase.from(table as any) as any)\n          .upsert(data, { onConflict, returning: \"representation\" })\n          .select()\n      )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 165,
        "column": 22,
        "match": "await handlePromise<T>(\n      } catch (error) {\n        // Handle error appropriately\n      }\n        (supabase.from(table as any) as any).insert(data).select()\n      )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 240,
        "column": 22,
        "match": "await handlePromise<T>(query.select())"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 307,
        "column": 22,
        "match": "await handlePromise<T>(query.select())"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 434,
        "column": 38,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 591,
        "column": 24,
        "match": "await operation()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 690,
        "column": 31,
        "match": "await query"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\error-handler.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\error-handling\\error-boundary.tsx": {
    "issues": [
      {
        "name": "Console statements",
        "severity": "warning",
        "message": "Console statement should be removed in production code",
        "line": 200,
        "column": 34,
        "match": "console.error"
      },
      {
        "name": "Console statements",
        "severity": "warning",
        "message": "Console statement should be removed in production code",
        "line": 203,
        "column": 5,
        "match": "console.error"
      },
      {
        "name": "Console statements",
        "severity": "warning",
        "message": "Console statement should be removed in production code",
        "line": 215,
        "column": 7,
        "match": "console.error"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\error-handling\\error-reporter.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 210,
        "column": 27,
        "match": "await supabase\n          .from('error_reports')\n          .insert(errors)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\error-handling\\error-types.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\error-handling\\error-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\error-handling\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\error-handling\\use-error-boundary.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\error-monitoring.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 40,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(this.TABLE_NAME)\n        .insert([error])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 116,
        "column": 9,
        "match": "await localStorage.captureError(error)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 135,
        "column": 31,
        "match": "await supabase\n        .from(this.TABLE_NAME)\n        .select(\"*\")\n        .order(\"timestamp\", { ascending: false })\n        .limit(limit)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 147,
        "column": 16,
        "match": "await localStorage.getErrors(limit)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 162,
        "column": 25,
        "match": "await supabase\n        .from(this.TABLE_NAME)\n        .delete()\n        .gte(\"id\", 0)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 257,
        "column": 5,
        "match": "await this.storage.captureError(error)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 271,
        "column": 5,
        "match": "await this.storage.captureError({\n    } catch (error) {\n      // Handle error appropriately\n    }\n      message: error.message || \"Unknown error\",\n      source,\n      severity,\n      stack: error.stack,\n      context,\n      user_id: userId,\n      timestamp: new Date().toISOString(),\n    })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 287,
        "column": 12,
        "match": "await this.storage.getErrors(limit)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 295,
        "column": 5,
        "match": "await this.storage.clearErrors()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 303,
        "column": 20,
        "match": "await this.getErrors(1000)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\error-recovery.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\form-optimization.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 225,
        "column": 9,
        "match": "await onSubmit(valuesRef.current)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\formatters.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\forms\\form-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\forms\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\forms\\use-form.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 168,
        "column": 11,
        "match": "await options.onSubmit(values)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\image-optimization.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 158,
        "column": 22,
        "match": "await fetch(src, { method: \"HEAD\", cache: \"force-cache\" })"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\image-optimizer.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\input-validation.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\inventory-assistant-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 34,
        "column": 22,
        "match": "await this.analyzeIntent(message)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 37,
        "column": 22,
        "match": "await this.executeAction(intent)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 310,
        "column": 35,
        "match": "await inventoryService.getItems({\n        searchTerm: materialName,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 432,
        "column": 35,
        "match": "await inventoryService.getItems({\n        searchTerm: materialName,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 480,
        "column": 9,
        "match": "await inventoryService.updateItem(materialToUpdate.id, {\n        } catch (error) {\n          // Handle error appropriately\n        }\n          min_stock_level: level,\n        })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 529,
        "column": 9,
        "match": "await inventoryService.getLowStockItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 640,
        "column": 35,
        "match": "await inventoryService.getItems({\n        searchTerm: materialName,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 691,
        "column": 9,
        "match": "await inventoryService.updateItem(materialToUpdate.id, {\n        } catch (error) {\n          // Handle error appropriately\n        }\n          quantity: newQuantity,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\inventory-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 56,
        "column": 24,
        "match": "await enhancedSupabaseService.paginate<Material>(\n        } catch (error) {\n          // Handle error appropriately\n        }\n          \"materials\",\n          \"*\",\n          options.page,\n          options.pageSize,\n          {\n            filters,\n            order: options?.orderBy,\n          }\n        )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 277,
        "column": 41,
        "match": "await this.getItemById(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 317,
        "column": 46,
        "match": "await this.getLowStockItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 468,
        "column": 31,
        "match": "await supabase.functions.invoke(\n        \"import-inventory\",\n        {\n          body: formData,\n        }\n      )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 504,
        "column": 31,
        "match": "await supabase.functions.invoke(\n        \"preview-import\",\n        {\n          body: formData,\n        }\n      )"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\lazy-pages.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\logging\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\logging\\logger.ts": {
    "issues": [
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 62,
        "column": 25,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 63,
        "column": 33,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 78,
        "column": 27,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 79,
        "column": 33,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 99,
        "column": 21,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 100,
        "column": 36,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 101,
        "column": 22,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 339,
        "column": 14,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 355,
        "column": 14,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'authLogger' is used but not imported",
        "line": 358,
        "column": 14,
        "match": "authLogger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 358,
        "column": 27,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'apiLogger' is used but not imported",
        "line": 359,
        "column": 14,
        "match": "apiLogger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 359,
        "column": 26,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'routerLogger' is used but not imported",
        "line": 360,
        "column": 14,
        "match": "routerLogger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 360,
        "column": 29,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'storeLogger' is used but not imported",
        "line": 361,
        "column": 14,
        "match": "storeLogger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 361,
        "column": 28,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'uiLogger' is used but not imported",
        "line": 362,
        "column": 14,
        "match": "uiLogger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 362,
        "column": 25,
        "match": "logger"
      },
      {
        "name": "Undefined variables",
        "severity": "error",
        "message": "Variable 'logger' is used but not imported",
        "line": 365,
        "column": 16,
        "match": "logger"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\mock-inventory-assistant-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 30,
        "column": 22,
        "match": "await this.analyzeIntent(message)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 33,
        "column": 22,
        "match": "await this.executeAction(intent)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 164,
        "column": 5,
        "match": "await new Promise(resolve => setTimeout(resolve, 1000))"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\notification-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 59,
        "column": 26,
        "match": "await Notification.requestPermission()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 81,
        "column": 23,
        "match": "await this.requestPermission()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\notifications\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\notifications\\notification-provider.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\notifications\\notification-store.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 145,
        "column": 38,
        "match": "await supabase.auth.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 151,
        "column": 35,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from('notifications')\n            .select('*')\n            .eq('user_id', user.id)\n            .order('timestamp', { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 195,
        "column": 38,
        "match": "await supabase.auth.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 224,
        "column": 11,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from('notifications')\n            .delete()\n            .eq('user_id', user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 235,
        "column": 13,
        "match": "await supabase\n            } catch (error) {\n              // Handle error appropriately\n            }\n              .from('notifications')\n              .insert(notificationsForSupabase)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\notifications\\notification-types.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\notifications\\notification-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\notifications\\use-notifications.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 109,
        "column": 7,
        "match": "await supabase.from('notifications').insert([\n        {\n          title: notification.title,\n          message: notification.message,\n          type: notification.type,\n          priority: notification.priority,\n          category: notification.category,\n          user_id: userId,\n          read: false,\n          icon: notification.icon,\n          data: notification.data,\n          created_at: notification.createdAt.toISOString(),\n        },\n      ])"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 134,
        "column": 33,
        "match": "await supabase\n          .from('notifications')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('read', false)\n          .order('created_at', { ascending: false })\n          .limit(10)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\offline-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 146,
        "column": 20,
        "match": "await supabase\n            .from(operation.table)\n            .insert(operation.data)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 151,
        "column": 20,
        "match": "await supabase\n            .from(operation.table)\n            .update(operation.data)\n            .match(operation.data.id ? { id: operation.data.id } : operation.data)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 158,
        "column": 20,
        "match": "await supabase\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(operation.table)\n            .delete()\n            .match(operation.data)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\os-report.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance\\lazy-loading.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance\\memo-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance\\render-optimization.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance\\virtualization.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance-monitor.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\performance-optimizer.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 46,
        "column": 22,
        "match": "await originalMethod.apply(this, args)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 91,
        "column": 18,
        "match": "await fetcher(...args)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 295,
        "column": 20,
        "match": "await fn()"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\performance.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\permission-checker.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\permission-provider.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\permission-rules.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\permission-service.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\permission-types.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\role-permissions.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\permissions\\use-permissions.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\route-preloader.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\string-utils\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\string-utils\\string-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\supabase\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\supabase\\supabase-client.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\supabase\\supabase-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 20,
        "column": 31,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 48,
        "column": 31,
        "match": "await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 80,
        "column": 31,
        "match": "await supabase.auth.signUp({\n        email,\n        password,\n        options,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 110,
        "column": 25,
        "match": "await supabase.auth.signOut()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 136,
        "column": 25,
        "match": "await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 164,
        "column": 25,
        "match": "await supabase.auth.updateUser({\n        password,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 192,
        "column": 41,
        "match": "await supabase.auth.updateUser(data)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 224,
        "column": 31,
        "match": "await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 256,
        "column": 31,
        "match": "await supabase\n        .from('profiles')\n        .update({\n          ...profile,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId)\n        .select()\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 298,
        "column": 31,
        "match": "await supabase.storage\n        .from(bucket)\n        .upload(path, file, {\n          cacheControl: '3600',\n          upsert: true,\n        })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 336,
        "column": 25,
        "match": "await supabase.storage\n        .from(bucket)\n        .remove([path])"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\supabase.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\tauri-client.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 25,
        "column": 12,
        "match": "await window.__TAURI__.invoke('get_system_info')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 41,
        "column": 12,
        "match": "await window.__TAURI__.invoke('file_exists', { path })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 57,
        "column": 12,
        "match": "await window.__TAURI__.invoke('read_file', { path })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 73,
        "column": 5,
        "match": "await window.__TAURI__.invoke('write_file', { path, contents })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 14,
        "match": "await dialog.open({\n        multiple: true,\n        filters: options.filters\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 101,
        "column": 14,
        "match": "await dialog.open({\n      } catch (error) {\n        // Handle error appropriately\n      }\n        multiple: false,\n        filters: options?.filters\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 129,
        "column": 12,
        "match": "await dialog.save({\n      defaultPath: options?.defaultPath,\n      filters: options?.filters\n    })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 150,
        "column": 12,
        "match": "await dialog.open({\n      directory: true\n    })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 168,
        "column": 5,
        "match": "await window.__TAURI__.shell.open(url)"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\themes\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\themes\\theme-provider.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\array-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\date-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\format-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\object-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\string-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils\\validation-utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\utils.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\validation\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\validation\\schemas.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\validation\\use-zod-form.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\lib\\__tests__\\enhanced-supabase-service.test.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 73,
        "column": 22,
        "match": "await enhancedSupabaseService.upsert('materials', { name: 'Test' })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 100,
        "column": 22,
        "match": "await enhancedSupabaseService.upsert('materials', { name: 'Test' })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 136,
        "column": 22,
        "match": "await enhancedSupabaseService.paginate('materials', '*', 1, 10, {\n      } catch (error) {\n        // Handle error appropriately\n      }\n        order: { column: 'name', ascending: true }\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 170,
        "column": 22,
        "match": "await enhancedSupabaseService.paginate('materials', '*', 1, 10)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 261,
        "column": 22,
        "match": "await enhancedSupabaseService.export('materials', 'csv')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 296,
        "column": 22,
        "match": "await enhancedSupabaseService.export('materials', 'json')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 320,
        "column": 22,
        "match": "await enhancedSupabaseService.export('materials', 'csv')"
      }
    ],
    "hasIssues": true
  },
  "src\\lib\\__tests__\\inventory-service.test.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 48,
        "column": 22,
        "match": "await inventoryService.getItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 80,
        "column": 22,
        "match": "await inventoryService.getItems({ projectId: 'project1' })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 112,
        "column": 22,
        "match": "await inventoryService.getItems({ searchTerm: 'search' })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 142,
        "column": 22,
        "match": "await inventoryService.getItems({ page: 1, pageSize: 10 })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 176,
        "column": 22,
        "match": "await inventoryService.getItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 209,
        "column": 22,
        "match": "await inventoryService.getItemById('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 237,
        "column": 22,
        "match": "await inventoryService.getItemById('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 270,
        "column": 22,
        "match": "await inventoryService.createItem({ name: 'New Item', quantity: 10 })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 294,
        "column": 22,
        "match": "await inventoryService.createItem({ name: 'New Item', quantity: 10 })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 327,
        "column": 22,
        "match": "await inventoryService.updateItem('123', { name: 'Updated Item', quantity: 20 })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 352,
        "column": 22,
        "match": "await inventoryService.updateItem('123', { name: 'Updated Item' })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 385,
        "column": 22,
        "match": "await inventoryService.deleteItem('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 409,
        "column": 22,
        "match": "await inventoryService.deleteItem('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 444,
        "column": 22,
        "match": "await inventoryService.getLowStockItems(10)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 469,
        "column": 22,
        "match": "await inventoryService.getLowStockItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 490,
        "column": 22,
        "match": "await inventoryService.getLowStockItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 531,
        "column": 22,
        "match": "await inventoryService.confirmSuplimentar('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 559,
        "column": 22,
        "match": "await inventoryService.confirmSuplimentar('123')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 593,
        "column": 22,
        "match": "await inventoryService.exportInventory('csv')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 624,
        "column": 22,
        "match": "await inventoryService.exportInventory('csv', {\n      } catch (error) {\n        // Handle error appropriately\n      }\n        projectId: 'project1',\n        category: 'category1'\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 659,
        "column": 22,
        "match": "await inventoryService.exportInventory('csv')"
      }
    ],
    "hasIssues": true
  },
  "src\\main.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\activity.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\comment.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\document.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\error.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\material.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\notification.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\project.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\report.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\settings.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\supplier.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\task.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\team.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\models\\user.model.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AboutPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AddMaterialPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AIInventoryAssistantPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AnalyticsPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AuditLogsPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\AuthCallbackPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 66,
        "column": 31,
        "match": "await supabase.auth.setSession({\n              access_token: accessToken,\n              refresh_token: refreshToken,\n            })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 89,
        "column": 39,
        "match": "await supabase.auth.getSession()"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\AuthPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 117,
        "column": 25,
        "match": "await authService.resendConfirmationEmail(resendEmail)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 171,
        "column": 31,
        "match": "await signIn(loginEmail, loginPassword)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 215,
        "column": 31,
        "match": "await signUp(\n      } catch (error) {\n        // Handle error appropriately\n      }\n        registerEmail,\n        registerPassword,\n        firstName\n      )"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\BudgetPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 62,
        "column": 58,
        "match": "await supabase\r\n        .from(\"budgets\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 70,
        "column": 60,
        "match": "await supabase\r\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"expenses\")\r\n        .select(\"budget_id, amount\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 134,
        "column": 25,
        "match": "await supabase\r\n        .from(\"budgets\")\r\n        .delete()\r\n        .eq(\"id\", budgetId)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\CalendarPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\CategoryManagementPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ChangePasswordPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\CompanyInventoryPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 71,
        "column": 20,
        "match": "await dataLoader.loadData<MaterialWithProject>(\r\n        \"materials\",\r\n        \"id, name, dimension, unit, quantity, manufacturer, category, image_url, suplimentar, project_id, cost_per_unit, supplier_id, last_order_date, min_stock_level, max_stock_level, location, notes\",\r\n        {},\r\n        cacheKey,\r\n        30 * 60 * 1000\r\n      )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 48,
        "match": "await supabase\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"materials\")\r\n          .select(\r\n            \"id, name, dimension, unit, quantity, manufacturer, category, image_url, suplimentar, project_id, cost_per_unit, supplier_id, last_order_date, min_stock_level, max_stock_level, location, notes\"\r\n          )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 39,
        "match": "await Promise.all(\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          (materialsData || []).map(async (material) => {\r\n            if (material.project_id) {\r\n              try {\n              const { data: projectData, error: projectError } = await supabase\r\n              } catch (error) {\n                // Handle error appropriately\n              }\n                .from(\"projects\")\r\n                .select(\"name\")\r\n                .eq(\"id\", material.project_id)\r\n                .single()"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ContactPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\CreateItemPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\DashboardPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\DesktopInfoPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\DocumentsPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\EditProfilePage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ErrorMonitoringPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 66,
        "column": 25,
        "match": "await errorMonitoring.getErrors(100)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 7,
        "match": "await errorMonitoring.clearErrors()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 26,
        "match": "await errorMonitoring.generateErrorReport()"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ForecastPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ForgotPasswordPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 28,
        "column": 25,
        "match": "await authService.resetPassword(email)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\HomePage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ImportExportPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\InventoryAssistantPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 240,
        "column": 24,
        "match": "await inventoryAssistantService.processMessage(message)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\InventoryListPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 11,
        "column": 17,
        "match": "await supabaseService.select<any[]>(\"resources\", \"*\")"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\InventoryManagementPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 61,
        "column": 33,
        "match": "await supabase\n          .from(\"projects\")\n          .select(\"id, name, description, status, created_at\")\n          .eq(\"manager_id\", user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 156,
        "column": 5,
        "match": "await confirmSuplimentar(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 194,
        "column": 12,
        "match": "await createMaterial(newMaterial)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 205,
        "column": 12,
        "match": "await updateMaterial(selectedMaterial.id, material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 214,
        "column": 12,
        "match": "await deleteMaterial(id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 223,
        "column": 12,
        "match": "await exportInventory(format)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 232,
        "column": 12,
        "match": "await generateReorderList()"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\InventoryOverviewPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 74,
        "column": 31,
        "match": "await inventoryService.getItems({\n      } catch (error) {\n        // Handle error appropriately\n      }\n        orderBy: { column: 'created_at', ascending: false },\n        pageSize: 5\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 99,
        "column": 31,
        "match": "await inventoryService.getLowStockItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 162,
        "column": 31,
        "match": "await inventoryService.getItems()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 238,
        "column": 31,
        "match": "await inventoryService.exportInventory(format)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ItemDetailPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 49,
        "column": 19,
        "match": "await supabaseService.select<ItemDetail>(\"resources\", \"*\", {\n      } catch (error) {\n        // Handle error appropriately\n      }\n        filters: { id },\n        single: true,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 96,
        "column": 7,
        "match": "await supabaseService.delete(\"resources\", { id })"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\LoginPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 41,
        "column": 31,
        "match": "await signIn(email, password)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\NotificationsPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\OSReportPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\OverviewPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 81,
        "column": 60,
        "match": "await supabase\r\n        .from(\"projects\")\r\n        .select(\"id, name, created_at\")\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 90,
        "column": 62,
        "match": "await supabase\r\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"materials\")\r\n        .select(\r\n          \"id, name, quantity, unit, suplimentar, project_id, projects(name)\",\r\n        )\r\n        .or(\"suplimentar.gt.0,quantity.lt.10\")\r\n        .limit(10)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 106,
        "column": 9,
        "match": "await supabase\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"supplier_announcements\")\r\n          .select(\r\n            \"id, supplier_name, status, created_at, project_id, projects(name)\",\r\n          )\r\n          .order(\"created_at\", { ascending: false })\r\n          .limit(10)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 121,
        "column": 34,
        "match": "await Promise.all(\r\n      } catch (error) {\n        // Handle error appropriately\n      }\n        projectsData.map(async (project) => {\r\n          // Count materials for this project\r\n          try {\n          const { count: materialsCount, error: countError } = await supabase\r\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"materials\")\r\n            .select(\"id\", { count: \"exact\" })\r\n            .eq(\"project_id\", project.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 140,
        "column": 64,
        "match": "await supabase\r\n          } catch (error) {\n            // Handle error appropriately\n          }\n            .from(\"supplier_announcements\")\r\n            .select(\"id\", { count: \"exact\" })\r\n            .eq(\"project_id\", project.id)\r\n            .eq(\"status\", \"pending\")"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\PreferencesPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\PricingPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ProfilePage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 105,
        "column": 31,
        "match": "await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", user.id)\r\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 152,
        "column": 55,
        "match": "await supabase\r\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"profiles\")\r\n          .insert([newProfile])\r\n          .select()\r\n          .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 266,
        "column": 25,
        "match": "await supabase\r\n        .from(\"profiles\")\r\n        .update({\r\n          full_name: formData.full_name,\r\n          job_title: formData.job_title,\r\n          phone: formData.phone,\r\n          location: formData.location,\r\n          bio: formData.bio,\r\n          skills: formData.skills,\r\n          avatar_url: formData.avatar_url,\r\n          theme_preference: formData.theme_preference,\r\n          language_preference: formData.language_preference,\r\n          email_notifications: formData.email_notifications,\r\n          mobile_notifications: formData.mobile_notifications,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq(\"id\", user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 338,
        "column": 25,
        "match": "await supabase.auth.updateUser({\r\n        password: passwordData.new_password,\r\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ProjectsPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 63,
        "column": 31,
        "match": "await supabase\r\n        .from(\"projects\")\r\n        .select(\"*\")\r\n        .eq(\"manager_id\", user.id)\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 141,
        "column": 29,
        "match": "await supabase\r\n            .from(\"projects\")\r\n            .delete()\r\n            .eq(\"id\", projectId)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\RegisterPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 49,
        "column": 31,
        "match": "await signUp(email, password)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ReportsPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 53,
        "column": 33,
        "match": "await supabase\r\n          .from(\"projects\")\r\n          .select(\"id, name\")\r\n          .eq(\"manager_id\", user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 127,
        "column": 31,
        "match": "await supabase\r\n        .from(\"reports\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 151,
        "column": 25,
        "match": "await supabase\r\n        .from(\"reports\")\r\n        .delete()\r\n        .eq(\"id\", reportId)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ResetPasswordPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\ResourcesPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 54,
        "column": 33,
        "match": "await supabase\r\n          .from(\"projects\")\r\n          .select(\"id, name\")\r\n          .eq(\"manager_id\", user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 129,
        "column": 31,
        "match": "await supabase\r\n        .from(\"resources\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 153,
        "column": 25,
        "match": "await supabase\r\n        .from(\"resources\")\r\n        .delete()\r\n        .eq(\"id\", resourceId)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\RoleManagementPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 88,
        "column": 9,
        "match": "await supabase.auth.admin.listUsers()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 52,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"user_roles\")\n        .select(\"*\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 148,
        "column": 43,
        "match": "await supabase\n        .from(\"user_roles\")\n        .select(\"*\")\n        .eq(\"user_id\", selectedUser.id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 162,
        "column": 40,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"user_roles\")\n          .update({ role: newRole })\n          .eq(\"user_id\", selectedUser.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 174,
        "column": 40,
        "match": "await supabase\n        } catch (error) {\n          // Handle error appropriately\n        }\n          .from(\"user_roles\")\n          .insert([{ user_id: selectedUser.id, role: newRole }])"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\ScanPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\SchedulePage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\SettingsPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 60,
        "column": 9,
        "match": "await new Promise(resolve => setTimeout(resolve, 1000))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 65,
        "column": 11,
        "match": "await updateUserProfile({\n          } catch (error) {\n            // Handle error appropriately\n          }\n            displayName,\n            email,\n          })"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\SuppliersPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\TasksPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\TeamsPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 102,
        "column": 31,
        "match": "await supabase\r\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"teams\")\r\n        .select(\"id, name, description, created_at, created_by\") // Selectăm doar coloanele necesare\r\n        .order(\"created_at\", { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 145,
        "column": 31,
        "match": "await supabase.from(\"teams\").insert({\r\n        name: newTeam.name,\r\n        description: newTeam.description,\r\n        created_by: user?.id,\r\n      }).select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 176,
        "column": 25,
        "match": "await supabase\r\n        .from(\"teams\")\r\n        .delete()\r\n        .eq(\"id\", teamId)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\TermsPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\TesterPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 85,
        "column": 52,
        "match": "await supabase.from(\"test_connection\").select(\"*\").limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, 500))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 121,
        "column": 52,
        "match": "await supabase.from(\"users\").select(\"count\").limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 130,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, 700))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 143,
        "column": 58,
        "match": "await supabase.from(\"projects\").select(\"count\").limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 152,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, 600))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 165,
        "column": 60,
        "match": "await supabase.from(\"materials\").select(\"count\").limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 174,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, 800))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 215,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, testDuration))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 263,
        "column": 7,
        "match": "await new Promise(resolve => setTimeout(resolve, testDuration))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 301,
        "column": 5,
        "match": "await runDatabaseTests()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 306,
        "column": 5,
        "match": "await runAuthTests()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 311,
        "column": 5,
        "match": "await runInventoryTests()"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\TutorialPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\UploadExcelPage.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 114,
        "column": 23,
        "match": "await import(\"exceljs\")"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 128,
        "column": 11,
        "match": "await workbook.xlsx.load(buffer)"
      }
    ],
    "hasIssues": true
  },
  "src\\pages\\UsersManagementPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\pages\\VerifyEmailPage.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\plugins\\mime-types.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\routes\\index.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\routes\\route-groups.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\routes\\routes.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\routes.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\scripts\\check-db.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 41,
        "column": 29,
        "match": "await supabase.from(tableName).select(\"*\").limit(1)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 71,
        "column": 22,
        "match": "await checkTable(table)"
      }
    ],
    "hasIssues": true
  },
  "src\\scripts\\test-edge-functions.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 15,
        "column": 56,
        "match": "await supabase\n      .from(\"projects\")\n      .insert([{ name: \"Test Project\" }])\n      .select()\n      .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 31,
        "column": 58,
        "match": "await supabase\n    } catch (error) {\n      // Handle error appropriately\n    }\n      .from(\"materials\")\n      .insert([\n        {\n          project_id: projectData.id,\n          name: \"Test Material\",\n          dimension: \"10x10\",\n          unit: \"pcs\",\n          quantity: 100,\n          manufacturer: \"Test Manufacturer\",\n          category: \"Test Category\",\n          suplimentar: 0,\n        },\n      ])\n      .select()\n      .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 61,
        "column": 56,
        "match": "await requestSuplimentar(\n    } catch (error) {\n      // Handle error appropriately\n    }\n      materialData.id,\n      10\n    )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 78,
        "column": 54,
        "match": "await adjustSuplimentar(\n    } catch (error) {\n      // Handle error appropriately\n    }\n      materialData.id,\n      5\n    )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 56,
        "match": "await confirmSuplimentar(\n    } catch (error) {\n      // Handle error appropriately\n    }\n      materialData.id\n    )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 111,
        "column": 54,
        "match": "await deleteMaterial(\n    } catch (error) {\n      // Handle error appropriately\n    }\n      materialData.id\n    )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 127,
        "column": 37,
        "match": "await supabase\n    } catch (error) {\n      // Handle error appropriately\n    }\n      .from(\"projects\")\n      .delete()\n      .eq(\"id\", projectData.id)"
      }
    ],
    "hasIssues": true
  },
  "src\\service-worker.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\services\\api\\enhanced-supabase-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 198,
        "column": 22,
        "match": "await operations()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 284,
        "column": 31,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 348,
        "column": 31,
        "match": "await dbQuery"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 381,
        "column": 31,
        "match": "await query"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\api\\supabase-client.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 56,
        "column": 26,
        "match": "await fetch(url, {\n          ...options,\n          headers,\n          signal: controller.signal,\n        })"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\api\\supabase-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 59,
        "column": 29,
        "match": "await promise"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 316,
        "column": 38,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 408,
        "column": 31,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 434,
        "column": 31,
        "match": "await supabase.auth.getUser()"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\auth\\auth-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 103,
        "column": 23,
        "match": "await Promise.race([authPromise, timeoutPromise])) as any"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 178,
        "column": 31,
        "match": "await supabase.auth.signUp({\n      } catch (error) {\n        // Handle error appropriately\n      }\n        email,\n        password,\n        options: {\n          emailRedirectTo: redirectUrl,\n          data: {\n            // Putem adăuga date suplimentare despre utilizator aici\n            display_name: displayName || email.split(\"@\")[0],\n            signup_timestamp: new Date().toISOString(),\n          },\n        },\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 222,
        "column": 25,
        "match": "await supabase.auth.resend({\n      } catch (error) {\n        // Handle error appropriately\n      }\n        type: \"signup\",\n        email,\n        options: {\n          emailRedirectTo: redirectUrl,\n        },\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 252,
        "column": 25,
        "match": "await supabase.auth.signOut()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 302,
        "column": 31,
        "match": "await supabase.auth.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 329,
        "column": 31,
        "match": "await supabase.auth.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 356,
        "column": 25,
        "match": "await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 385,
        "column": 31,
        "match": "await supabase.auth.updateUser({\n        password,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 413,
        "column": 24,
        "match": "await this.getSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 426,
        "column": 31,
        "match": "await supabase.auth.refreshSession()"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\auth\\role-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 21,
        "column": 54,
        "match": "await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", userId)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 38,
        "column": 56,
        "match": "await supabase\n      } catch (error) {\n        // Handle error appropriately\n      }\n        .from(\"user_roles\")\n        .select(\"role\")\n        .eq(\"user_id\", userId)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 86,
        "column": 39,
        "match": "await supabase\n        .from(\"profiles\")\n        .update({ role })\n        .eq(\"id\", userId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 116,
        "column": 20,
        "match": "await this.getUserRole(user.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 122,
        "column": 40,
        "match": "await supabase\n        .from(\"profiles\")\n        .select(\"display_name, email\")\n        .eq(\"id\", user.id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 165,
        "column": 20,
        "match": "await this.getUserRole(userId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 187,
        "column": 31,
        "match": "await supabase\n        .from(\"profiles\")\n        .select(\"id, email, role\")"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\cache\\cache-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 207,
        "column": 18,
        "match": "await loader()"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\data\\data-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 71,
        "column": 22,
        "match": "await enhancedSupabaseService.select<T[]>(this.tableName, '*', queryOptions)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 110,
        "column": 22,
        "match": "await enhancedSupabaseService.select<T>(this.tableName, '*', {\n      filters: { id },\n      single: true\n    })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 180,
        "column": 22,
        "match": "await enhancedSupabaseService.paginate<T>(\n      this.tableName,\n      '*',\n      pagination.page,\n      pagination.limit,\n      queryOptions\n    )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 205,
        "column": 22,
        "match": "await enhancedSupabaseService.insert<T>(this.tableName, data)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 220,
        "column": 22,
        "match": "await enhancedSupabaseService.update<T>(this.tableName, data, { id })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 234,
        "column": 22,
        "match": "await enhancedSupabaseService.delete<T>(this.tableName, { id })"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\data\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\services\\data\\material-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 33,
        "column": 42,
        "match": "await this.getAll()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 112,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 170,
        "column": 41,
        "match": "await this.getById(materialId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 207,
        "column": 61,
        "match": "await this.create(newMaterial)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 214,
        "column": 61,
        "match": "await this.update(materialId, {\n        quantity: material.quantity - quantity\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\data\\project-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 28,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 93,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 154,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 190,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 227,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 270,
        "column": 31,
        "match": "await this.getProjectTasks(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 273,
        "column": 36,
        "match": "await this.getProjectMilestones(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 276,
        "column": 33,
        "match": "await this.getProjectBudget(projectId)"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\data\\user-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 26,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 53,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 60,
        "column": 24,
        "match": "await enhancedSupabaseService.select<UserSettings>('user_settings', '*', {\n        filters: { user_id: user.id },\n        single: true\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 100,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 128,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 135,
        "column": 34,
        "match": "await this.getCurrentUserSettings()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 168,
        "column": 37,
        "match": "await authService.getUser()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 175,
        "column": 24,
        "match": "await enhancedSupabaseService.rpc<{ role: string }>('get_user_role', {\n        user_id: user.id\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\email\\email-service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 29,
        "column": 31,
        "match": "await supabase.functions.invoke(\"send-email\", {\n        body: {\n          to: email,\n          subject: \"Bun venit la InventoryMaster!\",\n          html: personalizedHtmlEmail,\n          text: personalizedTextEmail,\n        },\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 61,
        "column": 31,
        "match": "await supabase.functions.invoke(\"send-email\", {\n        body: {\n          to: email,\n          subject: \"Confirmă adresa de email - InventoryMaster\",\n          html: `\n            <div style=\"font-family: Arial, sans-serif"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\services\\material.service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 107,
        "column": 38,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 150,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .select('*')\n        .eq('id', id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 181,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .insert([{\n          ...material,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        }])\n        .select()\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 217,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .update({\n          ...material,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .select()\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 252,
        "column": 25,
        "match": "await supabase\n        .from('materials')\n        .delete()\n        .eq('id', id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 281,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .select('*')\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 312,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .select('*')\n        .eq('supplier_id', supplierId)\n        .order('created_at', { ascending: false })"
      }
    ],
    "hasIssues": true
  },
  "src\\services\\project.service.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 38,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 126,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .select('*')\n        .eq('id', id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 157,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .insert([{\n          ...project,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        }])\n        .select()\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 193,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .update({\n          ...project,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .select()\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 228,
        "column": 25,
        "match": "await supabase\n        .from('projects')\n        .delete()\n        .eq('id', id)"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\store\\slices\\app.slice.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\store\\slices\\auth.slice.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 64,
        "column": 31,
        "match": "await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 79,
        "column": 9,
        "match": "await get().fetchUserProfile()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 31,
        "match": "await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            display_name: displayName || email.split('@')[0],\n          },\n        },\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 126,
        "column": 7,
        "match": "await supabase.auth.signOut()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 146,
        "column": 25,
        "match": "await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 169,
        "column": 25,
        "match": "await supabase.auth.updateUser({\n        password,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 194,
        "column": 38,
        "match": "await supabase.auth.updateUser({\n          data: {\n            display_name: profile.display_name,\n            avatar_url: profile.avatar_url,\n          },\n        })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 205,
        "column": 34,
        "match": "await supabase\n        .from('profiles')\n        .update({\n          display_name: profile.display_name,\n          first_name: profile.first_name,\n          last_name: profile.last_name,\n          avatar_url: profile.avatar_url,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', get().user?.id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 219,
        "column": 7,
        "match": "await get().fetchUserProfile()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 238,
        "column": 24,
        "match": "await supabase.auth.refreshSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 248,
        "column": 9,
        "match": "await get().fetchUserProfile()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 265,
        "column": 31,
        "match": "await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single()"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\slices\\inventory.slice.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 92,
        "column": 31,
        "match": "await query"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 116,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .select('*')\n        .eq('id', id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 140,
        "column": 31,
        "match": "await supabase\n        .from('materials')\n        .insert([material])\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 171,
        "column": 25,
        "match": "await supabase\n        .from('materials')\n        .update({\n          ...material,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 210,
        "column": 25,
        "match": "await supabase\n        .from('materials')\n        .delete()\n        .eq('id', id)"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\slices\\projects.slice.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 84,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .select('*')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 116,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .select('*')\n        .eq('id', id)\n        .single()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 146,
        "column": 31,
        "match": "await supabase\n        .from('projects')\n        .insert([project])\n        .select()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 183,
        "column": 25,
        "match": "await supabase\n        .from('projects')\n        .update({\n          ...project,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 222,
        "column": 25,
        "match": "await supabase\n        .from('projects')\n        .delete()\n        .eq('id', id)"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\store.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\store\\useAuthStore.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 49,
        "column": 35,
        "match": "await authService.signIn(email, password)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 83,
        "column": 11,
        "match": "await authService.signOut()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 106,
        "column": 35,
        "match": "await authService.signUp(email, password)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 151,
        "column": 29,
        "match": "await authService.resetPassword(email)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 176,
        "column": 29,
        "match": "await authService.updatePassword(password)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 201,
        "column": 35,
        "match": "await userService.updateCurrentUserProfile(profile)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 230,
        "column": 35,
        "match": "await userService.updateCurrentUserSettings(settings)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 259,
        "column": 35,
        "match": "await authService.refreshSession()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 296,
        "column": 37,
        "match": "await userService.getCurrentUserProfile()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 302,
        "column": 38,
        "match": "await userService.getCurrentUserSettings()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 308,
        "column": 34,
        "match": "await userService.getCurrentUserRole()"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\useMaterialStore.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 49,
        "column": 31,
        "match": "await materialService.getAll()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 75,
        "column": 31,
        "match": "await materialService.getProjectMaterials(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 105,
        "column": 31,
        "match": "await materialService.getLowStockMaterials()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 131,
        "column": 31,
        "match": "await materialService.getMaterialsWithProjects()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 157,
        "column": 31,
        "match": "await materialService.getById(materialId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 183,
        "column": 31,
        "match": "await materialService.create(material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 227,
        "column": 31,
        "match": "await materialService.update(materialId, material)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 295,
        "column": 25,
        "match": "await materialService.delete(materialId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 349,
        "column": 31,
        "match": "await materialService.updateMaterialQuantity(materialId, quantity)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 360,
        "column": 7,
        "match": "await get().updateMaterial(materialId, data)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 376,
        "column": 31,
        "match": "await materialService.transferMaterial(materialId, fromProjectId, toProjectId, quantity)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 387,
        "column": 7,
        "match": "await get().fetchProjectMaterials(fromProjectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 388,
        "column": 7,
        "match": "await get().fetchProjectMaterials(toProjectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 391,
        "column": 7,
        "match": "await get().fetchMaterials()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 409,
        "column": 31,
        "match": "await materialService.searchMaterials(query)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 435,
        "column": 31,
        "match": "await materialService.addProjectMaterial(projectId, material)"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\useProjectStore.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 50,
        "column": 31,
        "match": "await projectService.getCurrentUserProjects()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 76,
        "column": 31,
        "match": "await projectService.getById(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 105,
        "column": 31,
        "match": "await projectService.getProjectMilestones(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 120,
        "column": 31,
        "match": "await projectService.getProjectBudget(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 135,
        "column": 31,
        "match": "await projectService.getProjectTasks(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 152,
        "column": 31,
        "match": "await projectService.createProject(project)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 183,
        "column": 31,
        "match": "await projectService.update(projectId, project)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 214,
        "column": 25,
        "match": "await projectService.delete(projectId)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 245,
        "column": 31,
        "match": "await projectService.addProjectMilestone(projectId, milestone)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 275,
        "column": 31,
        "match": "await projectService.addProjectBudget(projectId, budget)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 305,
        "column": 31,
        "match": "await projectService.addProjectTask(projectId, task)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 335,
        "column": 31,
        "match": "await projectService.updateProjectStatus(projectId, status)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 366,
        "column": 31,
        "match": "await projectService.updateProjectProgress(projectId, progress)"
      }
    ],
    "hasIssues": true
  },
  "src\\store\\useUIStore.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\accordion.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\alert-dialog.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\alert.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\aspect-ratio.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\avatar.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\badge.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\button.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\calendar.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\card.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\carousel.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\checkbox.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\collapsible.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\command.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\context-menu.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\dialog.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\drawer.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\dropdown-menu.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\hover-card.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\input.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\label.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\menubar.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\navigation-menu.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\pagination.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\popover.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\progress.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\radio-group.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\resizable.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\scroll-area.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\select.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\separator.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\sheet.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\skeleton.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\slider.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\switch.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\table.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\tabs.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\textarea.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\toggle.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\stories\\tooltip.stories.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\test-utils\\test-template.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\types\\index.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\types\\supabase-tables.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\types\\supabase-types.d.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\types\\supabase-types.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\utils\\cache-buster.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\utils\\clean-site.ts": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 25,
        "column": 29,
        "match": "await navigator.serviceWorker.getRegistrations()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 27,
        "column": 9,
        "match": "await registration.unregister()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 37,
        "column": 24,
        "match": "await caches.keys()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 38,
        "column": 5,
        "match": "await Promise.all(\n      cacheNames.map(async (cacheName) => {\n        await caches.delete(cacheName)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 50,
        "column": 23,
        "match": "await window.indexedDB.databases()"
      }
    ],
    "hasIssues": true
  },
  "src\\utils\\react-fix.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\utils\\use-layout-effect-shim.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\vite-env.d.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__mocks__\\i18n.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__mocks__\\lib\\inventory-service.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__mocks__\\lib\\supabase.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__mocks__\\supabase.ts": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\DeleteConfirmationDialog.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\ImportDialog.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 64,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText('inventory.importDialog.errors.noFile')).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 85,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText('inventory.importDialog.preview')).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 109,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockOnImport).toHaveBeenCalledWith(expect.any(Array))"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\components\\InventoryActions.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\InventoryAssistant.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\InventoryFilters.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\MaterialForm.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockOnSave).toHaveBeenCalledWith({\n        name: 'New Material',\n        category: 'New Category',\n        quantity: 20,\n        unit: 'kg',\n        price: 200,\n        supplier: 'New Supplier',\n        threshold: 10,\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 127,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText('inventory.form.errors.required')).toBeInTheDocument()"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\components\\MaterialsTable.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\components\\VirtualizedMaterialsTable.test.tsx": {
    "issues": [],
    "hasIssues": false
  },
  "src\\__tests__\\hooks\\useInventory.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 78,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 90,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 131,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 181,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 227,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 238,
        "column": 5,
        "match": "await act(async () => {\n      createResult = await result.current.createMaterial(newMaterial)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 268,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 277,
        "column": 5,
        "match": "await act(async () => {\n      updateResult = await result.current.updateMaterial('1', updatedMaterial)"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 301,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 305,
        "column": 5,
        "match": "await act(async () => {\n      deleteResult = await result.current.deleteMaterial('1')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 329,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 333,
        "column": 5,
        "match": "await act(async () => {\n      confirmResult = await result.current.confirmSuplimentar('2')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 366,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 370,
        "column": 5,
        "match": "await act(async () => {\n      reorderResult = await result.current.generateReorderList()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 393,
        "column": 5,
        "match": "await waitForNextUpdate()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 397,
        "column": 5,
        "match": "await act(async () => {\n      exportResult = await result.current.exportInventory('csv')"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 418,
        "column": 5,
        "match": "await waitForNextUpdate()"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\InventoryManagementPage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 70,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 85,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 97,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 106,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Adaugă Material Nou/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 115,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\pages\\DashboardPage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 69,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Panou de Control/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 87,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Panou de Control/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 100,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Panou de Control/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 117,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Panou de Control/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 129,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Panou de Control/i)).toBeInTheDocument()"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\pages\\InventoryManagementPage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 81,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 95,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 104,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Adaugă Material Nou/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 137,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 149,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 188,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Inventar/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 197,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Sunteți sigur/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 206,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockDeleteMaterial).toHaveBeenCalledWith('1')"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\pages\\LoginPage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 66,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Adresa de email este obligatorie/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 86,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123',\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 138,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockToast).toHaveBeenCalledWith({\n        title: expect.any(String),\n        description: expect.stringContaining('Invalid login credentials'),\n        variant: 'destructive',\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\pages\\ProfilePage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 94,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Profil/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 109,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Profil/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 137,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.update).toHaveBeenCalledWith({\n        first_name: 'Jane',\n        last_name: 'Smith',\n        phone: '9876543210',\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 172,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/John Doe/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 181,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Profil/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 202,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.storage.from().upload).toHaveBeenCalledWith(\n        expect.stringContaining('user123'),\n        file,\n        { upsert: true }\n      )"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 227,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Profil/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 240,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockToast).toHaveBeenCalledWith({\n        title: expect.any(String),\n        description: expect.stringContaining('Failed to update profile'),\n        variant: 'destructive',\n      })"
      }
    ],
    "hasIssues": true
  },
  "src\\__tests__\\pages\\SettingsPage.test.tsx": {
    "issues": [
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 99,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 114,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 140,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.update).toHaveBeenCalledWith(expect.objectContaining({\n        theme: 'dark',\n        language: 'en',\n      }))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 152,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 181,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.update).toHaveBeenCalledWith(expect.objectContaining({\n        notifications_enabled: false,\n        email_notifications: false,\n        push_notifications: true,\n      }))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 194,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 216,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(supabase.update).toHaveBeenCalledWith(expect.objectContaining({\n        auto_save: false,\n      }))"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 230,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 243,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockToast).toHaveBeenCalledWith({\n        title: expect.stringContaining('Salvat'),\n        description: expect.any(String),\n        variant: 'default',\n      })"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 268,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(screen.getByText(/Setări/i)).toBeInTheDocument()"
      },
      {
        "name": "Missing error handling",
        "severity": "warning",
        "message": "Potential missing error handling for await",
        "line": 281,
        "column": 5,
        "match": "await waitFor(() => {\n      expect(mockToast).toHaveBeenCalledWith({\n        title: expect.stringContaining('Eroare'),\n        description: expect.stringContaining('Failed to update settings'),\n        variant: 'destructive',\n      })"
      }
    ],
    "hasIssues": true
  }
}